<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Personal blog]]></title><description><![CDATA[My name is Thanh Pham. Junior Scala/Akka back-end developer @ohze. Sophomore student @hus-vnu and Technical Evangelist @MicrosoftStudentPartnersVietnam]]></description><link>https://thanhphamvan.github.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 15 Nov 2017 22:12:54 GMT</lastBuildDate><atom:link href="https://thanhphamvan.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Mười nghìn tiếng]]></title><description><![CDATA[<div class="paragraph">
<p>&gt;Warning: Wall of Text</p>
</div>
<div class="paragraph">
<p>Tối là thời gian mình hoạt động tốt hơn ban ngày, nhân tiện cũng vừa làm vào cốc cafe nên mình cũng muốn động tay chân một tý nên sẽ chém gió trên này một tẹo, bạn nào không thích dài dòng lắm lời thì nên ignore.</p>
</div>
<div class="paragraph">
<p>Mình muốn nói về đoạn trích được đăng tải trên Vnexpress 8 năm trước, nhưng đến hôm nay thì mình với biết về nó, đoạn trích trên vốn đăng tải trong quyển sách Outliers của Malcolm Gladwell, tựa Việt là Những Kẻ Xuất Chúng:
<a href="https://kinhdoanh.vnexpress.net/tin-tuc/doanh-nghiep/quy-tac-10-000-gio-cua-cac-vi-nhan-2701620.html" class="bare">https://kinhdoanh.vnexpress.net/tin-tuc/doanh-nghiep/quy-tac-10-000-gio-cua-cac-vi-nhan-2701620.html</a></p>
</div>
<div class="paragraph">
<p>Những con người được nói trong bài viết trên: The Beatles, Paul Allen và Bill Gates, một người cũng tên Bill nữa: Bill Joy.</p>
</div>
<div class="paragraph">
<p>Trước khi đi vào vấn đề, mình muốn nói qua về quyển sách. Outliers là quyển sách mà Malcolm viết, phân tích đầy đủ về văn hóa xã hội, điều kiện, tài năng và tham vọng của những người được cho là xuất chúng trong thế kỉ trước. Outliers có rất nhiều những quan điểm trái chiều và phản bác, các bạn có thể tìm ra nhiều bài viết tiếng Việt như vậy, và vì mình luôn khuyến khích tư duy phản biện, nên hãy thoải mái đưa ra ý kiến ở phần comment. Nhưng mình thấy rằng Outliers không phải là kiểu sách self-help sẽ đập vào mắt bạn khi bước vào hiệu sách, quyển sách không vẽ ra một màu hồng hay những phương pháp kiểu "tự kỷ ám thị", Malcolm muốn giải thích những yếu tố nội tại lẫn ngoại lai và sự ảnh hưởng của nó lên từng người mà ông đề cập.</p>
</div>
<div class="paragraph">
<p>Nếu các bạn đã kiên nhẫn đọc đến đây, xin cảm ơn vì đã dành thời gian, cũng xin lỗi vì mình sẽ còn lan man tiếp.</p>
</div>
<div class="paragraph">
<p>Tại sao mình lại chọn đoạn trích này ?</p>
</div>
<div class="paragraph">
<p>Những con người trong câu truyện trên đều có 2 điểm chung:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Họ chỉ có 24 tiếng mỗi ngày, mình cũng có điểm này, và bạn, người đọc bài viết này cũng thế (trừ trường hợp nếu bạn không ở Trái Đất, bạn không có điểm chung này).</p>
</li>
<li>
<p>Họ sử dụng thời gian theo cách, mà nếu những người khác nhìn vào, sẽ ngay lập tức cho rằng như vậy "không ổn chút nào".</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Mỗi người có cách sử dụng thời gian của riêng mình, quan niệm về thời gian của mỗi người cũng khác nhau. Cho nên không thể nói ai hay ai dở được.</p>
</div>
<div class="paragraph">
<p>Tất nhiên trong nhiều bài viết phản biện, người ta cho rằng con số 10000 tiếng là không chính xác. Bởi vì luôn có những con người có thiên phú hơn người khác, họ tìm ra cách hiệu quả nhất, rút ngắn con số trên, và ngược lại, có những con người không thật sự hiệu quả và mất nhiều hơn vậy, như vậy, con số 10000 chỉ mang ý nghĩa trung bình.</p>
</div>
<div class="paragraph">
<p>Nhưng có 2 điều mình tin tưởng rằng, với trường hợp của chúng ta (giả sử rằng các bạn đều có chung mục tiêu):</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Kinh nghiệm và sự tinh thông là thứ có thể đong đếm bằng thời gian.</p>
</li>
<li>
<p>Trong lập trình, tiền bạc và mối quan hệ sẽ chả đưa bạn đi đến đâu.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Trong đoạn trích trên, 10000 đơn vị mà Bill Joy đã đạt được khi "thực đến tận 2 hay 3 giờ sáng, xem những bộ phim cũ kỹ và lập trình" và đôi khi "ngủ gục trên bàn phím".
10000 cũng là lời giải thích cho câu hỏi của mẹ Gates, khi mà bà luôn thắc mắc tại sao con trai mình lại khó khăn trong việc thức dậy vào buổi sáng. (Trường hợp của The Beatles thì mình không dám nói, âm nhạc là thứ phức tạp và tai trâu của mình thì không hiểu)</p>
</div>
<div class="paragraph">
<p>Năm 1 Đại Học đã cho mình biết mình đang thiếu thứ gì. Và suốt từ đó đến nay, mình luôn giành ra khoảng thời gian 8-10 tiếng mỗi ngày cho việc mà mình coi là quan trọng, tuy vậy mình vẫn dốt và điểm mình vẫn như shiet :)).</p>
</div>
<div class="paragraph">
<p>Đã đọc đến đây rồi, bạn có thể chia sẻ xem việc gì mà bạn cho là quan trọng và bạn đang giành bao nhiêu thời gian cho nó vậy ?</p>
</div>
<div class="paragraph">
<p>P.S: Bài viết thể hiện quan điểm cá nhân, mà đã là quan điểm cá nhân kiểu gì cũng sai.</p>
</div>
<div class="paragraph">
<p>P.SS: Cảm ơn các bạn đã đọc hết :")</p>
</div>]]></description><link>https://thanhphamvan.github.io/2017/11/16/Muoi-nghin-tieng.html</link><guid isPermaLink="true">https://thanhphamvan.github.io/2017/11/16/Muoi-nghin-tieng.html</guid><category><![CDATA[Tâm Sự]]></category><category><![CDATA[Blog]]></category><dc:creator><![CDATA[Thanh Pham Van]]></dc:creator><pubDate>Thu, 16 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Scala 2.12.3 released!]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Link: <a href="https://github.com/scala/scala/releases/tag/v2.12.3">Github</a>, <a href="https://www.reddit.com/r/scala/comments/6q11l8/scala_2123_released/">Reddit/r/scala</a></p>
</div>
<div class="paragraph">
<p>Vì trình độ hạn chế của người dịch, không thể tránh được dịch sai, dịch thiếu nghĩa, ngôn từ ngượng gạo. Nhưng để thực hiện mục tiêu "tốt hơn", điều này là cần thiết :'(.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_changes">Changes</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Tốc độ của compiler được <a href="https://developer.lightbend.com/blog/2017-06-12-faster-scala-compiler/">cải thiện đáng kể</a> và kể từ bây giờ sẽ tự động <a href="https://scala-ci.typesafe.com/grafana/dashboard/db/scala-benchmark">tính điểm benchmark</a> sau mỗi thay đổi</p>
</li>
<li>
<p>Setting mới: <code>-opt-inline-from</code>. Dùng lệnh <code>scalac -opt-inline-from:help</code> để xem giải thích chi tiết từ nhà phát triển.</p>
</li>
<li>
<p>The presentation compiler has improved support for implicit macros, which should improve the experience with libraries based on Shapeless. It also has better support for code completion for dependently typed methods. (Ví lý do giới hạn về trình độ, mình không "dám" dịch câu này)</p>
</li>
</ol>
</div>
<div class="sect3">
<h4 id="_futher_changes">Futher changes:</h4>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/scala/scala/pull/5978">#5978</a> Tránh gọi các static initializers khi khôi phục các lớp của Java</p>
</li>
<li>
<p><a href="https://github.com/scala/scala/pull/5589">#5589</a> Thêm setting mới <code>-opt-inline-from</code></p>
</li>
<li>
<p><a href="https://github.com/scala/scala/pull/5931">#5931</a> Nâng cấp lên jline 2.14.4</p>
</li>
<li>
<p><a href="https://github.com/scala/scala/pull/5880">#5880</a> Đóng gói scala-parser-combinators mới (1.0.5&#8594;1.0.6)</p>
</li>
<li>
<p><a href="https://github.com/scala/scala/pull/5879">#5879</a> -Xlint:unused -Ywarn-unused is intuitive</p>
</li>
<li>
<p><a href="https://github.com/scala/scala/pull/5848">#5848</a> add per-phase profiling to scalac</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_scala_2_12_notes">Scala 2.12 Notes</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://github.com/scala/scala/releases/v2.12.0">Scala 2.12.x Notes</a> đã được cập nhật thêm những thay đổi quan trọng</p>
</div>
</div>
</div>]]></description><link>https://thanhphamvan.github.io/2017/07/28/Scala-2123-released.html</link><guid isPermaLink="true">https://thanhphamvan.github.io/2017/07/28/Scala-2123-released.html</guid><category><![CDATA[Scala]]></category><dc:creator><![CDATA[Thanh Pham Van]]></dc:creator><pubDate>Fri, 28 Jul 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Akka FSM Pattern]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>FSM (viết tắt của Finite-state machine) là một pattern phổ biến trong lập trình game.<br>
Có thể hiểu ý tưởng ngắn gọn về FSM là:<br>
<code>State(S) ! Event(E) &#8594; State(S'), Action(A)</code></p>
</div>
<div class="paragraph">
<p>Tức là: Tại trạng thái S, sự kiện E xảy ra. Điều này dẫn đến trại thái chuyển về S' và thực hiện hành động A</p>
</div>
<div class="paragraph">
<p>Pattern này khá phổ biến với những Java developers (các bạn có thể đọc guide trên <a href="https://www.tutorialspoint.com/design_pattern/state_pattern.htm">TP</a>, tuy nhiên bản thân mình thấy guide này khá là khô khan và không dễ hình dung được ý tưởng về pattern từ ví dụ được đưa ra).</p>
</div>
<div class="paragraph">
<p>Với Scala, Akka cũng đã tích hợp FSM từ những build rất sớm.</p>
</div>
<div class="paragraph">
<p>Mục tiêu của bài viết là giới thiệu cho người đọc về FSM pattern cũng như một số cái "hay ho" của Scala (ngôn ngữ mình ghét ít thứ nhì sau C#).</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_ph_n_t_ch_v_thi_t_k">Phân tích và thiết kế</h3>
<div class="paragraph">
<p>Để đơn giản và dễ hình dung nhất. Chúng ta sẽ mô phỏng lại 1 cách cửa có khả năng tự đóng lại sau khi mở ra.</p>
</div>
<div class="sect3">
<h4 id="_1_li_t_k_nh_ng_tr_i_th_i_c_th_c">1. Liệt kê những trại thái có thể có.</h4>
<div class="ulist">
<ul>
<li>
<p>Đóng (Closed)</p>
</li>
<li>
<p>Mở (Opened)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Phức tạp hơn, các bạn có thêm trạng thái Giữ lại (Held)</p>
</div>
</div>
<div class="sect3">
<h4 id="_2_d_li_u_c_truy_n_gi_a_c_c_tr_i_th_i_statedata">2. Dữ liệu được truyền giữa các trại thái (StateData)</h4>
<div class="paragraph">
<p>Well, với object là một cái cửa thì chúng ta không có nhiều lắm thông tin cần lưu trữ lại.<br>
Ví dụ về StateData có thể áp dụng khi mà chúng ta muốn lập trình một cánh cửa có khả năng đưa ra số người trong phòng bằng cách đếm số người ra/vào chẳng hạn. Khi đó StateData sẽ là một số Int tăng giảm tuỳ vào Event.<br>
Trong trường hợp này, mình sẽ lấy ví dụ với cách cửa có kèm theo bộ đếm số lần mở cửa. Con số này sẽ chỉ tăng mà không giảm đi.</p>
</div>
</div>
<div class="sect3">
<h4 id="_3_ng_v_i_t_ng_tr_ng_th_i_li_t_k_c_c_event_c_th_c">3. Ứng với từng trạng thái, liệt kê các event có thể có</h4>
<div class="paragraph">
<p>Với trạng thái Đóng (Closed), chúng ta sẽ có event Push()
Với trạng thái Mở (Opened), chúng ta sẽ có event StateTimeOut()</p>
</div>
</div>
<div class="sect3">
<h4 id="_4_ng_v_i_t_ng_event_li_t_k_c_c_thay_i_v_tr_ng_th_i_v_d_li_u_truy_n_gi_a_c_c_tr_ng_th_i">4. Ứng với từng event, liệt kê các thay đổi về trạng thái và dữ liệu truyền giữa các trạng thái</h4>
<div class="paragraph">
<p>Chúng ta sẽ có:<br>
<code>State(Closed) ! Push() &#8594; State(Opened), ++Counter</code><br>
<code>State(Opened) ! StateTimeOut() &#8594; State(Closed)</code></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_code">Code</h2>
<div class="sectionbody">
<div class="sect3">
<h4 id="_chu_n_b_m_i_tr_ng">Chuẩn bị môi trường</h4>
<div class="paragraph">
<p>Hãy tạo 1 project mới bằng cách dùng <a href="https://github.com/sbt/sbt">sbt</a><br>
Truy cập vào file <code>build.sbt</code>, thêm vào dòng:<br></p>
</div>
<div class="listingblock">
<div class="title">build.sbt</div>
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">libraryDependencies += "com.typesafe.akka" %% "akka-actor" % "2.5.3"</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_khai_b_o_c_c_state_v_event">Khai báo các State và Event</h4>
<div class="listingblock">
<div class="title">Door.scala</div>
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">sealed trait DoorState <i class="conum" data-value="1"></i><b>(1)</b>

case object Opened extends DoorState

case object Closed extends DoorState

case class Pull() <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>. Tất cả các State đều phải extends từ trait DoorState</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>. Event phải được khai bác dưới dạng một case class</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_object_class_door">Object &amp; Class Door</h4>
<div class="listingblock">
<div class="title">Door.scala</div>
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">object Door {

  import scala.concurrent.ExecutionContext.Implicits.global
  import scala.concurrent.duration._

  val system = ActorSystem("door-system")

  def start(duration: FiniteDuration): ActorRef =
    system.actorOf(Props(new Door(duration)))

  def start(duration: Long): ActorRef =
    system.actorOf(Props(new Door(duration.milliseconds)))

  def stop(ref: ActorRef): Unit = system.stop(ref)

  def shutdown(): Unit = system.terminate().map(
    _ =&gt; println("Door-System is terminated!")
  )

  def pull(ref: ActorRef): Unit = {
    ref ! Pull()
  }
}

class Door(duration: FiniteDuration) extends Actor with FSM[DoorState, Int] { <i class="conum" data-value="1"></i><b>(1)</b>
  startWith(Closed, 0) <i class="conum" data-value="2"></i><b>(2)</b>

  when(Closed) {
    case Event(Pull(), counter) =&gt;
      goto(Opened) using (counter + 1) forMax duration <i class="conum" data-value="3"></i><b>(3)</b>
  }

  when(Opened) {
    case Event(StateTimeout, _) =&gt; goto(Closed)
  }

  onTransition {
    case Closed -&gt; Opened =&gt; <i class="conum" data-value="4"></i><b>(4)</b>
      log.info("The door is opened!")
    case Opened -&gt; Closed =&gt;
      log.info("The door is closed!")
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>. Akka hạn chế lỗi bằng cách yêu cầu khai báo StateType.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>. State và StateData mặc định khi Actor được khởi tạo.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>. forMax duration sẽ "bắn ra" StateTimeOut khi hết thời gian.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>. Có thể override để FSM bắn ra thêm các sự kiện.</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_tham_kh_o_th_m">Tham khảo thêm</h4>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="https://kipalog.com/posts/Viet-chuong-trinh-finite-state-machine-voi-Akka">Akka FSM trên Kipalog (Bài viết chính mà mình bắt đầu học)</a></p>
</li>
<li>
<p><a href="http://doc.akka.io/docs/akka/2.5.3/scala/fsm.html">Tài liệu về FSM của Akka</a></p>
</li>
</ol>
</div>
</div>
</div>
</div>]]></description><link>https://thanhphamvan.github.io/2017/07/26/Tim-hieu-ve-FSM-Pattern-tren-Scala-Akka.html</link><guid isPermaLink="true">https://thanhphamvan.github.io/2017/07/26/Tim-hieu-ve-FSM-Pattern-tren-Scala-Akka.html</guid><category><![CDATA[Scala]]></category><category><![CDATA[Akka]]></category><category><![CDATA[Pattern]]></category><category><![CDATA[FSM]]></category><dc:creator><![CDATA[Thanh Pham Van]]></dc:creator><pubDate>Wed, 26 Jul 2017 00:00:00 GMT</pubDate></item></channel></rss>